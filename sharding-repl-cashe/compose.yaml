name: sharding-repl-cache
services:
  #  сервер конфигурации
  configSrv:
    image: mongo:latest # docker образ
    container_name: configSrv
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - config-data:/data/db
    command:
      [
        "--configsvr",  #  запуск в режиме конфигурации
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #1-й шард реплика 1
  shard1_r1:
    image: mongo:latest
    container_name: shard1_r1
    restart: always
    ports:
      - "27018:27018"
    volumes:
      - shard1_r1-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", #название реплики
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #1-й шард реплика 2
  shard1_r2:
    image: mongo:latest
    container_name: shard1_r2
    restart: always
    ports:
      - "27021:27021"
    volumes:
      - shard1_r2-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", #название реплики
        "--bind_ip_all",
        "--port",
        "27021"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #1-й шард реплика 3
  shard1_r3:
    image: mongo:latest
    container_name: shard1_r3
    restart: always
    ports:
      - "27022:27022"
    volumes:
      - shard1_r3-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard1", #название реплики
        "--bind_ip_all",
        "--port",
        "27022"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #2-й шард реплика 1
  shard2_r1:
    image: mongo:latest
    container_name: shard2_r1
    restart: always
    ports:
      - "27019:27019"
    volumes:
      - shard2_r1-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2", #название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #2-й шард реплика 2
  shard2_r2:
    image: mongo:latest
    container_name: shard2_r2
    restart: always
    ports:
      - "27023:27023"
    volumes:
      - shard2_r2-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2", #название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27023"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #2-й шард реплика 3
  shard2_r3:
    image: mongo:latest
    container_name: shard2_r3
    restart: always
    ports:
      - "27024:27024"
    volumes:
      - shard2_r3-data:/data/db
    command:
      [
        "--shardsvr", #запуск в режиме шардинга
        "--replSet",
        "shard2", #название реплик
        "--bind_ip_all", # обратите внимание - она отличается от реплики 1-го шарда
        "--port",
        "27024"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #роутер
  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27020:27020"
    command:
      [
        "mongos", #обычная mongo в режиме роутера
        "--configdb",
        "config_server/configSrv:27017", #передача данных сервера конфигурации
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  redis_1:
    image: "redis:latest"
    container_name: redis_1
    ports:
      - "6379:6379"
    command: [ "redis-server"]

  pymongo_api:
    container_name: pymongo_api
    build:
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router
    ports:
      - '8080:8080'
    environment:
      MONGODB_URL: "mongodb://mongos_router:27020"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis_1:6379/0"

volumes:
  config-data:
  shard1_r1-data:
  shard1_r2-data:
  shard1_r3-data:
  shard2_r1-data:
  shard2_r2-data:
  shard2_r3-data:
  redis_1_data:
